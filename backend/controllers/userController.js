// ============================================================================
// USER CONTROLLER - X·ª≠ l√Ω c√°c API endpoints li√™n quan ƒë·∫øn User Management
// ============================================================================

// 1. IMPORTS V√Ä DEPENDENCIES
import User from "../models/userModel.js"; // Model User ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi MongoDB
import jwt from "jsonwebtoken"; // Th∆∞ vi·ªán t·∫°o v√† verify JWT tokens
import bcrypt from "bcryptjs"; // Th∆∞ vi·ªán hash password ƒë·ªÉ b·∫£o m·∫≠t
import crypto from "crypto";
import nodemailer from "nodemailer";
import transporter from "../config/email.js"; // Import transporter t·ª´ config/email.js

// REGISTER USER - ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi (cho ng∆∞·ªùi d√πng t·ª± ƒëƒÉng k√Ω t·ª´ frontend)
export const registerUser = async (req, res) => {
  try {
    const { name, email, password, phone } = req.body;

    if (!name || !email || !password) {
      return res.status(400).json({ message: "Thi·∫øu t√™n, email ho·∫∑c m·∫≠t kh·∫©u" });
    }

    const existing = await User.findOne({ email: email.toLowerCase() });
    if (existing) {
      return res.status(409).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }

    const normalizedPhone = /^\d{10}$/.test((phone || '').toString().trim())
      ? (phone || '').toString().trim()
      : '0000000000';

    // üß© T·∫°o m√£ x√°c minh email 6 ch·ªØ s·ªë
    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();

    // T·∫°o user m·ªõi (ch∆∞a k√≠ch ho·∫°t)
    const user = await User.create({
      name,
      email: email.toLowerCase(),
      password,
      phone: normalizedPhone,
      role: 'customer',
      gender: 'other',
      province: 'Ch∆∞a c·∫≠p nh·∫≠t',
      city: 'Ch∆∞a c·∫≠p nh·∫≠t',
      dob: new Date('2000-01-01'),
      verificationCode,        // L∆∞u m√£ x√°c minh v√†o DB
      isVerified: false        // G·∫Øn c·ªù ch∆∞a x√°c minh
    });

    // ‚úâÔ∏è C·∫•u h√¨nh email x√°c minh
    const mailOptions = {
      from: process.env.SMTP_EMAIL,
      to: user.email,
      subject: "X√°c minh t√†i kho·∫£n - CineTicket",
      html: `
        <h2>Ch√†o m·ª´ng ${user.name}!</h2>
        <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i <strong>CineTicket</strong>.</p>
        <p>M√£ x√°c minh c·ªßa b·∫°n l√†:</p>
        <h1 style="color:#e74c3c;letter-spacing:3px;">${verificationCode}</h1>
        <p>Vui l√≤ng nh·∫≠p m√£ n√†y ƒë·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω.</p>
        <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
      `
    };

    try {
      await transporter.sendMail(mailOptions);
      console.log(`‚úÖ Email x√°c minh ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi ${user.email}`);
    } catch (emailError) {
      console.error("‚ùå G·ª≠i email th·∫•t b·∫°i:", emailError);
      return res.status(500).json({
        message: "ƒêƒÉng k√Ω th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ g·ª≠i email x√°c minh. Vui l√≤ng th·ª≠ l·∫°i sau."
      });
    }

    const secret = process.env.JWT_SECRET || 'devsecret';
    const token = jwt.sign({ id: user._id }, secret, { expiresIn: '30d' });

    return res.status(201).json({
      _id: user._id,
      name: user.name,
      email: user.email,
      role: user.role,
      token,
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c minh t√†i kho·∫£n."
    });

  } catch (error) {
    console.error("Register error:", error);
    return res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: error.message });
  }
};


// ADD USER - Admin th√™m user m·ªõi (c√≥ th·ªÉ set role v√† th√¥ng tin ƒë·∫ßy ƒë·ªß)
export const addUser = async (req, res) => {
  try {
    // DESTRUCTURING v·ªõi default values cho admin t·∫°o user
    const {
      name,
      email,
      password,
      phone,
      role = 'customer',      // Admin c√≥ th·ªÉ ch·ªçn role
      gender = 'other',
      province,               // Kh√¥ng set default ·ªü ƒë√¢y
      city,                   // Kh√¥ng set default ·ªü ƒë√¢y  
      dob = '2000-01-01'
    } = req.body;

    // DEBUG LOG
    console.log('ADD USER - Received data:', { name, email, phone, role, gender, province, city, dob });

    // VALIDATION: Ki·ªÉm tra c√°c field b·∫Øt bu·ªôc
    if (!name || !email || !password) {
      return res.status(400).json({ message: "Thi·∫øu t√™n, email ho·∫∑c m·∫≠t kh·∫©u" });
    }

    // ROLE VALIDATION: Ki·ªÉm tra role h·ª£p l·ªá
    const validRoles = ['customer', 'employee', 'admin'];
    if (!validRoles.includes(role.toLowerCase())) {
      return res.status(400).json({ message: "Role kh√¥ng h·ª£p l·ªá" });
    }

    // DUPLICATE CHECK: Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existing = await User.findOne({ email: email.toLowerCase() });
    if (existing) {
      return res.status(409).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }

    // PHONE NORMALIZATION: Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i
    const normalizedPhone = /^\d{10}$/.test((phone || '').toString().trim())
      ? (phone || '').toString().trim()
      : '0000000000';

    // ADDRESS PROCESSING: X·ª≠ l√Ω province v√† city
    const finalProvince = (province && province.trim() !== '') ? province.trim() : 'Ch∆∞a c·∫≠p nh·∫≠t';
    const finalCity = (city && city.trim() !== '') ? city.trim() : 'Ch∆∞a c·∫≠p nh·∫≠t';

    console.log('ADD USER - Final address:', { finalProvince, finalCity });

    // CREATE USER: T·∫°o user m·ªõi v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
    const user = await User.create({
      name,
      email: email.toLowerCase(),
      password,                          // S·∫Ω ƒë∆∞·ª£c hash t·ª± ƒë·ªông
      phone: normalizedPhone,
      role: role.toLowerCase(),
      gender: (gender || 'other').toLowerCase(),
      province: finalProvince,
      city: finalCity,
      dob: new Date(dob)
    });

    // SUCCESS RESPONSE: Tr·∫£ v·ªÅ th√¥ng tin user (KH√îNG c√≥ token)
    return res.status(201).json({
      _id: user._id,
      name: user.name,
      email: user.email,
      phone: user.phone,
      role: user.role,
      gender: user.gender,
      province: user.province,
      city: user.city,
      dob: user.dob,
      message: "Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng"
      // Kh√¥ng tr·∫£ v·ªÅ token v√¨ admin kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n m·ªõi t·∫°o
    });
  } catch (error) {
    return res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: error.message });
  }
};

// LOGIN USER - ƒêƒÉng nh·∫≠p t√†i kho·∫£n
export const loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;

    // INPUT VALIDATION: Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!email || !password) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u" });
    }

    // USER LOOKUP: T√¨m user theo email (case-insensitive)
    const user = await User.findOne({ email: email.toLowerCase() });
    if (!user) {
      return res.status(401).json({ message: "Email kh√¥ng t·ªìn t·∫°i" }); // 401 Unauthorized
    }

    // PASSWORD VERIFICATION: Ki·ªÉm tra m·∫≠t kh·∫©u
    const isMatch = await user.matchPassword(password);
    if (!isMatch) {
      return res.status(401).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
    }

    // JWT TOKEN GENERATION: T·∫°o token cho session
    const secret = process.env.JWT_SECRET || 'devsecret';
    const token = jwt.sign({ id: user._id }, secret, {
      expiresIn: "30d",                 // Token c√≥ hi·ªáu l·ª±c 30 ng√†y
    });

    // SUCCESS RESPONSE: Tr·∫£ v·ªÅ th√¥ng tin user v√† token ƒë·ªÉ frontend l∆∞u
    res.json({
      _id: user._id,                    // User ID ƒë·ªÉ identify
      name: user.name,                  // T√™n ƒë·ªÉ hi·ªÉn th·ªã
      email: user.email,                // Email ƒë·ªÉ hi·ªÉn th·ªã
      role: user.role,                  // Role ƒë·ªÉ ph√¢n quy·ªÅn frontend
      token: token,                     // JWT token cho c√°c request sau
    });
  } catch (error) {
    console.error("Login error:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};


// CHANGE PASSWORD - ƒê·ªïi m·∫≠t kh·∫©u (user t·ª± ƒë·ªïi m·∫≠t kh·∫©u c·ªßa m√¨nh)
export const changePassword = async (req, res) => {
  try {
    const { currentPassword, newPassword } = req.body;

    // INPUT VALIDATION: Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
    if (!currentPassword || !newPassword) {
      return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc" });
    }

    // GET CURRENT USER: L·∫•y user ƒëang ƒëƒÉng nh·∫≠p t·ª´ protect middleware
  
    const user = await User.findById(req.user._id);
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    // VERIFY CURRENT PASSWORD: X√°c minh m·∫≠t kh·∫©u hi·ªán t·∫°i
    const isMatch = await user.matchPassword(currentPassword);
    if (!isMatch) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng" });
    }

    // PASSWORD SIMILARITY CHECK: ƒê·∫£m b·∫£o m·∫≠t kh·∫©u m·ªõi kh√°c m·∫≠t kh·∫©u c≈©
    if (currentPassword === newPassword) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u m·ªõi ph·∫£i kh√°c m·∫≠t kh·∫©u hi·ªán t·∫°i" });
    }

    // UPDATE PASSWORD: C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    user.password = newPassword; // S·∫Ω ƒë∆∞·ª£c hash b·ªüi pre('save') middleware trong model
    await user.save();           // Trigger pre('save') hook ƒë·ªÉ hash password

    // SUCCESS RESPONSE
    return res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (error) {
    // ERROR HANDLING
    return res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: error.message });
  }
};


// GET ALL USERS - L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (ch·ªâ admin)
export const getAllUsers = async (req, res) => {
  try {
    // T√åM T·∫§T C·∫¢ USERS: select('-password') ƒë·ªÉ lo·∫°i b·ªè field password kh·ªèi k·∫øt qu·∫£
    // sort({ createdAt: -1 }) ƒë·ªÉ s·∫Øp x·∫øp theo th·ªùi gian t·∫°o m·ªõi nh·∫•t tr∆∞·ªõc
    const users = await User.find({}).select('-password').sort({ createdAt: -1 });
    
    // DATA TRANSFORMATION: Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√†nh format c·∫ßn thi·∫øt cho frontend
    return res.json(users.map(user => ({
      _id: user._id,           // MongoDB ObjectId
      name: user.name,         // T√™n ng∆∞·ªùi d√πng
      email: user.email,       // Email ƒëƒÉng nh·∫≠p
      phone: user.phone,       // S·ªë ƒëi·ªán tho·∫°i
      role: user.role,         // Vai tr√≤ (admin/employee/customer)
      gender: user.gender,     // Gi·ªõi t√≠nh (male/female/other)
      province: user.province, // T·ªânh/th√†nh ph·ªë
      city: user.city,         // Qu·∫≠n/huy·ªán
      dob: user.dob,           // Ng√†y sinh
      createdAt: user.createdAt // Ng√†y t·∫°o t√†i kho·∫£n
    })));
  } catch (error) {
    // ERROR HANDLING: X·ª≠ l√Ω l·ªói server v√† tr·∫£ v·ªÅ th√¥ng b√°o
    return res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

// DELETE USER - X√≥a ng∆∞·ªùi d√πng (ch·ªâ admin)
export const deleteUser = async (req, res) => {
  try {
    const { id } = req.params; // L·∫•y user ID t·ª´ URL parameters
    
    // T√åM V√Ä X√ìA USER: findByIdAndDelete th·ª±c hi·ªán 2 operations trong 1 l·ªánh
    const user = await User.findByIdAndDelete(id);
    if (!user) {
      // N·∫øu kh√¥ng t√¨m th·∫•y user v·ªõi ID n√†y
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
    }

    // SUCCESS: Tr·∫£ v·ªÅ th√¥ng b√°o x√≥a th√†nh c√¥ng
    return res.json({ message: 'X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng' });
  } catch (error) {
    // ERROR HANDLING: L·ªói c√≥ th·ªÉ do ID kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói database
    return res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

// UPDATE USER - C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (admin/employee)
export const updateUser = async (req, res) => {
  try {
    const { id } = req.params; // L·∫•y user ID t·ª´ URL parameters
    // Destructuring c√°c fields c√≥ th·ªÉ c·∫≠p nh·∫≠t t·ª´ request body
    const { name, email, phone, role, gender, province, city, password } = req.body;

    // DYNAMIC PAYLOAD BUILDING: Ch·ªâ c·∫≠p nh·∫≠t c√°c fields ƒë∆∞·ª£c g·ª≠i l√™n
    const payload = {}; // Object ch·ª©a d·ªØ li·ªáu c·∫ßn c·∫≠p nh·∫≠t
    if (name) payload.name = name;                          // C·∫≠p nh·∫≠t t√™n n·∫øu c√≥
    if (email) payload.email = email.toLowerCase();         // Chu·∫©n h√≥a email th√†nh lowercase
    if (phone) payload.phone = phone;                       // C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i
    if (role) payload.role = role.toLowerCase();            // Chu·∫©n h√≥a role th√†nh lowercase
    if (gender) payload.gender = gender.toLowerCase();      // Chu·∫©n h√≥a gender th√†nh lowercase
    
    // SPECIAL HANDLING FOR ADDRESS: X·ª≠ l√Ω province v√† city
    if (province !== undefined) {
      payload.province = (province && province.trim() !== '') ? province.trim() : 'Ch∆∞a c·∫≠p nh·∫≠t';
    }
    if (city !== undefined) {
      payload.city = (city && city.trim() !== '') ? city.trim() : 'Ch∆∞a c·∫≠p nh·∫≠t';
    }
    
    // SPECIAL HANDLING FOR PASSWORD: M·∫≠t kh·∫©u c·∫ßn ƒë∆∞·ª£c hash tr∆∞·ªõc khi l∆∞u
    if (password && password.trim()) {
      const salt = await bcrypt.genSalt(10);                // T·∫°o salt v·ªõi ƒë·ªô ph·ª©c t·∫°p 10
      payload.password = await bcrypt.hash(password.trim(), salt); // Hash password v·ªõi salt
    }

    // DATABASE UPDATE: findByIdAndUpdate v·ªõi options
    // new: true - tr·∫£ v·ªÅ document sau khi update
    // runValidators: true - ch·∫°y validation rules t·ª´ schema
    const user = await User.findByIdAndUpdate(id, payload, { new: true, runValidators: true });
    if (!user) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    // SUCCESS RESPONSE: Tr·∫£ v·ªÅ th√¥ng tin user ƒë√£ c·∫≠p nh·∫≠t
    return res.json({
      _id: user._id,
      name: user.name,
      email: user.email,
      role: user.role,
      phone: user.phone,
      gender: user.gender,
      province: user.province,
      city: user.city,
      // DYNAMIC MESSAGE: Th√¥ng b√°o kh√°c nhau t√πy c√≥ c·∫≠p nh·∫≠t password hay kh√¥ng
      message: password ? 'C·∫≠p nh·∫≠t th√¥ng tin v√† m·∫≠t kh·∫©u th√†nh c√¥ng' : 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng'
    });
  } catch (error) {
    // ERROR HANDLING: C√≥ th·ªÉ l√† l·ªói validation, duplicate email, ho·∫∑c database error
    return res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

/**
 * @desc    Qu√™n m·∫≠t kh·∫©u (G·ª≠i email ch·ª©a link reset token)
 * @route   POST /api/users/forgotpassword
 * @access  Public
 */
export const forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;

    // üîç Ki·ªÉm tra xem email c√≥ t·ªìn t·∫°i trong h·ªá th·ªëng kh√¥ng
    const existingUser = await User.findOne({ email });
    if (!existingUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y" });
    }

    // ü™Ñ T·∫°o token reset password
    const resetToken = crypto.randomBytes(32).toString("hex");
    existingUser.resetPasswordToken = resetToken;
    existingUser.resetPasswordExpire = Date.now() + 10 * 60 * 1000; // Token h·∫øt h·∫°n sau 10 ph√∫t

    await existingUser.save();

    // üîó T·∫°o ƒë∆∞·ªùng link reset password (frontend React)
    const resetURL = `http://localhost:3000/reset-password/${resetToken}`;

    // ‚úâÔ∏è G·ª≠i email reset password
    const mailOptions = {
      from: process.env.SMTP_EMAIL,
      to: existingUser.email,
      subject: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - Movie Ticket System",
      html: `
        <h2>Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
        <p>Xin ch√†o ${existingUser.name},</p>
        <p>B·∫°n v·ª´a y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. H√£y nh·∫•n v√†o li√™n k·∫øt b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i:</p>
        <a href="${resetURL}" style="color: #ff4444;">${resetURL}</a>
        <p>Li√™n k·∫øt n√†y s·∫Ω h·∫øt h·∫°n sau 10 ph√∫t.</p>
        <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu, vui l√≤ng b·ªè qua email n√†y.</p>
      `,
    };

    await transporter.sendMail(mailOptions);

    res.status(200).json({ message: "‚úÖ Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i!" });
  } catch (error) {
    console.error("Forgot Password Error:", error);
    res.status(500).json({ message: "‚ùå L·ªói khi g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau." });
  }
};


/**
 * @desc    Reset m·∫≠t kh·∫©u b·∫±ng token
 * @route   PUT /api/users/resetpassword/:token
 * @access  Public
 */
export const resetPassword = async (req, res) => {
  try {
    const { password, confirmPassword } = req.body;
    const token = req.params.token;

    if (!password || !confirmPassword) {
      return res.status(400).json({ 
        message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u" 
      });
    }

    if (password !== confirmPassword) {
      return res.status(400).json({ 
        message: "M·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp" 
      });
    }

    const user = await User.findOne({
      resetPasswordToken: token,
      resetPasswordExpire: { $gt: Date.now() },
    });

    if (!user) {
      return res.status(400).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    user.password = password;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpire = undefined;
    await user.save();

    res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (error) {
    console.error("Reset Password Error:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};

/**
 * @desc    L·∫•y th√¥ng tin profile c·ªßa user
 * @route   GET /api/users/profile
 * @access  Private
 */
export const getProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select('-password');
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }
    res.json(user);
  } catch (error) {
    console.error("Get profile error:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

/**
 * @desc    C·∫≠p nh·∫≠t th√¥ng tin profile c·ªßa user
 * @route   PUT /api/users/profile
 * @access  Private
 */
export const updateProfile = async (req, res) => {
  try {
    const { name, email, dob, phone, province, city, gender } = req.body;
    
    const user = await User.findById(req.user._id);
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    if (name) user.name = name;
    if (email) user.email = email;
    if (dob) user.dob = dob;
    if (phone) user.phone = phone;
    if (province) user.province = province;
    if (city) user.city = city;
    if (gender) user.gender = gender;

    await user.save();

    const userResponse = await User.findById(user._id).select('-password');
    res.json(userResponse);
  } catch (error) {
    console.error("Update profile error:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};
